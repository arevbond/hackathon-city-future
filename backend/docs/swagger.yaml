basePath: /
definitions:
  main.AssignTechRequest:
    properties:
      tech_user_id:
        example: 123
        type: integer
    type: object
  main.CreateCommentRequest:
    properties:
      content:
        type: string
      report_id:
        type: integer
      user_id:
        type: integer
    type: object
  main.CreateCommentResponse:
    properties:
      id:
        example: 789
        type: integer
    type: object
  main.CreateRequest:
    properties:
      client_email:
        type: string
      client_name:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  main.CreateRequestResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  main.CreateTechReportRequest:
    properties:
      report:
        example: Работы выполнены в полном объеме
        type: string
      request_id:
        example: 123
        type: integer
      tech_user_id:
        example: 456
        type: integer
    type: object
  main.CreateTechReportResponse:
    properties:
      id:
        example: 456
        type: integer
    type: object
  main.HealthResponse:
    properties:
      status:
        type: string
    type: object
  main.LoginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  main.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/main.User'
    type: object
  main.PongResponse:
    properties:
      message:
        type: string
    type: object
  main.Request:
    properties:
      client_email:
        type: string
      client_name:
        type: string
      create_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/main.RequestStatus'
      tech_user_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  main.RequestListResponse:
    properties:
      requests:
        items:
          $ref: '#/definitions/main.Request'
        type: array
    type: object
  main.RequestResponse:
    properties:
      request:
        $ref: '#/definitions/main.Request'
    type: object
  main.RequestStatus:
    enum:
    - ""
    type: string
    x-enum-varnames:
    - RequestWithoutStatus
  main.SuccessResponse:
    properties:
      success:
        example: "true"
        type: string
    type: object
  main.UpdateStatusRequest:
    properties:
      public_note:
        type: string
      status:
        type: string
    type: object
  main.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/main.UserRole'
    type: object
  main.UserRole:
    enum:
    - ""
    - manager
    - tech
    - client
    type: string
    x-enum-varnames:
    - UserWithoutRole
    - UserManager
    - UserTech
    - UserClient
host: localhost:8080
info:
  contact: {}
  description: Simple API for hackathon project
  title: My Hackathon API
  version: "1.0"
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Создает новый комментарий к техническому отчету
      parameters:
      - description: Данные комментария
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/main.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.CreateCommentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создание комментария
      tags:
      - comments
  /health:
    get:
      description: Проверяет, доступен ли сервер
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthResponse'
      summary: Проверка состояния сервера
      tags:
      - health
  /login:
    post:
      consumes:
      - application/json
      description: Проверяет email и пароль пользователя, возвращает JWT и данные
        пользователя
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Авторизация пользователя
      tags:
      - auth
  /ping:
    get:
      description: Возвращает "pong" при GET-запросе
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.PongResponse'
      summary: Проверка доступности API
      tags:
      - health
  /request:
    post:
      consumes:
      - application/json
      description: Создаёт новый запрос в системе
      parameters:
      - description: Данные нового запроса
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.CreateRequestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создание запроса
      tags:
      - requests
  /request/{id}:
    get:
      description: Возвращает запрос по его идентификатору
      parameters:
      - description: ID запроса
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RequestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение запроса по ID
      tags:
      - requests
  /requests:
    get:
      description: Возвращает все запросы с фильтром по статусу (опционально)
      parameters:
      - description: Статус запроса
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RequestListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение списка запросов
      tags:
      - requests
  /requests/{id}/assign-tech:
    put:
      consumes:
      - application/json
      description: Назначает технического специалиста для работы с конкретным запросом
      parameters:
      - description: ID запроса
        in: path
        name: id
        required: true
        type: integer
      - description: ID технического специалиста
        in: body
        name: tech
        required: true
        schema:
          $ref: '#/definitions/main.AssignTechRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Назначение технического специалиста на запрос
      tags:
      - requests
  /requests/{id}/status:
    patch:
      consumes:
      - application/json
      description: Изменяет статус конкретного запроса по его ID
      parameters:
      - description: ID запроса
        in: path
        name: id
        required: true
        type: integer
      - description: Новый статус запроса
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/main.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление статуса запроса
      tags:
      - requests
  /tech-report:
    post:
      consumes:
      - application/json
      description: Создает новый технический отчет для выполненного запроса
      parameters:
      - description: Данные технического отчета
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/main.CreateTechReportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.CreateTechReportResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создание технического отчета
      tags:
      - tech-reports
swagger: "2.0"
